# Locality Consolidation Algorithm

TODO: What about localities with same/similar coordinates, regardless of their names? Easiest solution is probably to store a rounding of the coordinates in the locality cache and compare those roundings while comparing phonetics. I'd probably need special exclusions for differently named localities at the same coordinate rounding, though. Maybe update the algorithm after getting tests working on phonetics.

This algorithm walks the user through consolidating the localities in a given geographic region or set of geographic regions, optionally restricting consolidation to just the localities dated on or after a given baseline date. The process starts with many assumptions about what to look for in potential duplicate localities, and as consolidation proceeds, the user answers questions that gradually whittle down the assumptions so that fewer and fewer false matches are presented. During the process, the user may also enter prospective synonymous terms as they come to mind for the program to use in flagging possible duplicates. The program periodically presents the user with possibly-duplicate locality entries, and for each, the user decides whether or not the program should merge the localities or keep them distinct, optionally editing either locality, sometimes answering questions about the reason for a decision. The program gradually accumulates knowledge about what information is and is not useful for detecting duplicates, storing that information in a local file, which can be copied to other computers as needed.

The algorithm compares localities containing words having similar pronunciations, which is the only approach I could find for detecting misspellings short of comparing every word to every other word. The user can also declare synonymous words and phrases for use in comparisons, which the algorithm compares by pronunciation to try to catch misspellings. As consolidation proceeds, the user helps the program understand which sorts of matches are unhelpful, tracking the following sorts of mismatches:

(+) Multiple localities having the same name in the two different regions.
(+) Multiple localities having the same name in the same region at different coordinates.
(+) Different series of words having identical pronunciations that are inequivalent.
(+) Different series of words whose pronunciations are equivalent to word series that were declared synonymous but that are inequivalent.
(+) Word series that are uninformative and should be ignored for matching purposes.

At this time, I have no idea how long this process takes or how long the user might have to wait between interactions with the computer, but I have implemented an algorithm that nearly eliminates the N-squared problem of comparing every locality with every other locality and only compares localities that are known to have something in common. I also don't know how much disk space will be required to perform the consolidation, as the process requires simultaneously caching many localities. However, I have implemented some optimization that strives to minimize the number of localities cached at any given time, but I did not go with the greatest possible memory optimization, which would have forced the user to jump around from locality to locality instead of evaluating each locality for duplicates before moving on to the next.

## Remaining To-Do Items

(+) Experiment with the choice of phonetic encoding. I'll do this by running the program on different encodings. But this may require faking locality mergers so that I'm not correcting the database and preventing myself from running the same experiment with another encodings. I'm punting on how to handle encodings until then.

(+) This functional representation of the algorithm does not allow for storing state for later resumption from that state should the computer crash. If the computer crashes, the algorithm must be restarted from scratch, although it will employ any synonyms and excluded matches accumulated during the run that crashed. However, the region roster can be resumed from its state at crash, reducing the number of regions that need to be compared, so look into doing this.

(+) [ON HOLD] Decide how to support applying dynamically-added synonymous phonetic series to previously-processed regions and to already-processed localities within the currently-processed region. It would be simplest to record the fact that some regions were not examined with newly added synonyms, and at completion of a round of consolidation, offer to re-consoliate everything again to account for the new synonyms. I could some day optimize this by recording the times at which regions were added and the times at which synonyms were added, restricting comparisons to just the regions that need to be re-examined. But for now, I'll just suggest the user re-run the algorithm after completion to look for stragglers.

(+) [ON HOLD] Support localities/regions pulled in via CSV or via single newly added record. When importing a CSV or entering a single new record, the domain is the set of region in the CSV or the region in the new record. And when processing an domain region, each locality of the CSV (or the new locality) is compared against the localities of the adjoining regions (including the region itself). When processing a non-domain region, each locality of the non-domain region is compared only to localities in the CSV or the locality of the new record.

(+) [ON HOLD] It is possible for two localities to match on phonetic series that are subsets of other series that are themselves excluded matches. When this happens, no matches are registered and the localities are not presented to the user as possible duplicates. Because this is a low-probability edge case that seems to require a lot of coding, I'm not handling it.

(+) [ON HOLD] I've not provided a mechanism for editing the excluded matches store. Once decisions are made about the relevance of computer-suggested matches, they are permanent until the file underlying the store is deleted, at which point all excluded matches are lost.

## Important Notes

(+) Because multiple users on the same computer or across multiple computers could be simultaneously doing consolidations, possibly intermittently, I'll need to verify that associated data in Specify has not changed since caching prior to modifying the database. I should probably do this anyway, in case someone concurrently changes the data by means other than consolidation.

(+) This algorithm does not consolidate localities according to common coordinates. It only consolidates localities according to relationships among the words in their descriptions. However, it is able to distinguish identically-named localities having different coordinates, should the user declare them as such during consolidation.

## Terminology

(+) Domain: The set of all geographic regions whose localities are all to be examined for consolidation with other localities, whether these other localities belong to regions within the domain or not. For any region that contains a region in the domain, the containing region is also in the domain.

(+) Over Domain: The set of all geographic regions each containing at least one region of the domain but not itself in the domain.

(+) Baseline date: The earliest creation or modification date of the localities within the domain that are to be examined for consolidation. By specifying a baseline date to restrict the localities being consolidated, the user can reduce the amount of time required for consolidation. This date should normally be the date of the most recent consolidation for the given domain.

(+) Word delimiter: any of the characters (".:;/!&()+-=[]{}?<>|\), plus em dash and en dash, plus the comma if not immediately adjacent to two digits, plus the single quote if not immediately adjacent to two alphabetic (non-numeric, non-punctuation) characters, plus CR or LF, plus the start or end of a string. Dashes are intentionally word delimiters so that occurrences with and without dashes can be found equivalent.

(+) Word: A sequence of one more characters either beginning with an alphabetic character or else containing only digits (representing an integer), and bounded on each side within text by a word delimiter.

(+) Normalized word: A word latinized by removing all accents and diacritics, by converting to lowercase, and by deleting single quotes.

(+) Word series: A set of one or more consecutive words found in text excluding words of fewer than 3 characters and other specific words, normalized. Words of fewer than 3 characters are ignored for purposes of determining whether words are consecutive, as are the following words: and, for, from, the, with. An "occurrence-ordered" word series orders the words in their order of occurrence, while a "sorted" word series orders the words alphanumerically.

(+) Phonetic code: The phonetic code of a word containing no digits is the phonetic encoding of the word, according to some phonetic encoding algorithm. The phonetic code of a word containing at least one digit is the exact word itself, preceded by a pound ('#'), assuming that the pound does not appear in any phonetic encoding. The phonetic code for any other word that the phonetic encoding algorithm cannot code is also the exact word preceded by a pound. Phonetic codes are used to catch misspellings, but they can only catch misspellings that sound similar to the intended word.

(+) Phonetic series: A set of one or more phonetic codes together corresponding to a word series, with each phonetic code being the phonetic code for its corresponding (normalized) word in the word series. An "occurrence-ordered" phonetic series orders the words in their order of occurrence, while a "sorted" phonetic series orders the codes alphanumerically with duplicates removed.

(+) Locality key: A storage key that is a hybrid of the ID for the most-specific geographic region associated with the locality and the locality ID.

(+) Adjoined: Two regions are considered "adjoined" if, prior to consolidation, a given locality could potentially belong to both of them. Adjoined regions are either adjacent or have a containment relationship, but not all regions in such relationships are considered adjoined. Two localities are considered adjoined if they belong to adjoined regions.

## Persistent Data Structures

### AdjacentRegionsGraph

Indicates which geographic regions touch one another, associating regions by their Specify geographic IDs. This data structure could be kept in memory once read from storage, because it's not very large. In particular, this structure indicates:

(+) Adjacencies among U.S. counties.
(+) Adjacencies among U.S. counties and Mexican states.
(+) Adjacencies among U.S. counties and Canadian provinces.
(+) Adjacencies among U.S. states, Mexican states, and Canadian provinces.
(+) Adjacencies among North and Central American countries, excluding the Caribbean.

### RegionRoster

A list of the regions undergoing consolidation, serving as a to-do list for the consolidation algorithm. Regions are added to the region roster during consolidation but not removed until consolidation completes, so that the algorithm has access to the consolidation status of all regions found relevant.

The key is the region's geography ID. The value is a structure containing the following information:

(+) rank: The region's geographic rank (in Specify)
(+) inDomain: Whether the region is in the domain
(+) localityTotal: The number of localities that point to the region as the most-specific region for the locality. The implementation could compute this on-demand and save computed values for reuse later. If includesLowerRanks is true, add to this number the number of localities in all regions contained within the present region.
(+) status: "pending" indicates that its localities must be examined but haven't been cached yet; "cached" indicates that the localities have been cached but not examined yet; "complete" indicates that the localities have been examined and their caches removed. Initialized to "pending".
(+) adjoiningPendingCount: The total number of localities remaining to be cached in all adjacent regions. This value is initialized to zero but only meaningful in cached regions.
(+) includesLowerRanks: Whether the region not only represents localities designated with this region, but also all localities designated with lower-ranked regions that the region contains. Needed to support adjacencies that aren't given at the lowest possible rank.

RegionRoster is initialized to the regions of the domain, including all regions contained within regions of the domain. Regions adjacent to those in the domain are added to the region roster as needed.

Define function cacheRegion(region to cache (C)):
	(+) For each locality (L1) in localitiesOfRegion(C, C.includesLowerRanks):
		(+) Cache (L1) in LocalityCache.
		(+) Update PhoneticLocalityIndex for (L1)'s phonetic codes.
	(+) Mark (C) as cached in RegionRoster.
	(+) If (C) is in the domain:
		(+) For each region (A) in the set containing regions strictly adjacent to (C), regions containing (C), and regions contained in (C):
			(+) If (A) is not in RegionRoster:
				(+) Add (A) to RegionRoster with status "pending".
			(+) If (A) has status "pending":
				(+) Add (A)'s localityTotal to (C)'s adjoiningPendingCount.
	(+) Else:
		(+) For each region (A) strictly adjacent to (C):
			(+) If (A) is in the domain and has status "pending":
				(+) Add (A)'s localityTotal to (C)'s adjoiningPendingCount.
		(+) If (C) is in the over domain:
			(+) For each region (A) contained in (C):
				(+) If (A) is in the domain and has status "pending":
					(+) Add (A)'s localityTotal to (C)'s adjoiningPendingCount.

Note: It's important to compute the adjoiningPendingCount even for regions containing no locality, because these regions eventually need to be visited to cache their adjacent regions, but we don't want all empty regions processed first, which would happen were their counts always zero.

### LocalityCache

Cached preprocessed localities. Prior to use, localities must be preprocessed to produce their word series and phonetic series. This is a time-consuming process, so the results are cached to prevent having to repeat the process. The algorithm manages this structure to try to minimize the number of localities that are cached at any time, thereby reducing the amount of memory required.

The key is a locality key, allowing localities to be looked up or deleted as a group by specific geographic ID, and allowing individual localities to be retrieved. The value consists of the following:

(+) location ID (from Specify)
(+) geographic ID (i.e. region; from Specify)
(+) last modification date/time
(+) latitude1
(+) longitude1
(+) locality name
(+) occurrence-ordered phonetic series encoding of locality name
(+) remarks

### PhoneticLocalityIndex

Indexes cached localities and synonymous phonetic series by the phonetic codes they contain, so that cached localities and phonetic series synonyms can be looked up by containing phonetic codes.

They key is a phonetic code. The value is the following structure:

(+) localityKeys: a list of the keys for localities containing a word with the phonetic code given by the key.
(+) synonyms: a list of the phonetic series found in PotentialSynonymsStore that contain the phonetic code given by the key. The order of phonetic codes in each series does not matter.

When a cached locality is removed from the LocalityCache, its locality keys are removed from all of its phonetic codes in PhoneticLocalityIndex. When a phonetic key loses all of its associated locality keys, the record is removed from PhoneticLocalityIndex if there are no synonyms, thus keeping the size of PhoneticLocalityIndex to the minimum needed, improving performance.

For now, the number of synonyms is expected to be small, so it's okay to keep entries around for the phonetic codes with synonyms, even if none of the cached localities use them.

### ExcludedMatchesStore

Stores permanent knowledge about which pairs of sorted word series having identical or synonymous phonetic series are not to be considered suggestive of having duplicate localities.

The key (K) is an occurrence-ordered word series. The value consists of at least one of the following:

(+) regions: an optional list of region pairs, where each region is given by its geographic ID. Each region pair indicates that when a locality in one region of the pair shares word series (K) with a locality in the other region of the pair, the presence of the common word series (K) is not to be considered sufficient for presenting the two localities to the user as possible duplicates.
(+) coordinates: an optional list of pairs of lat/long coordinate pairs. Each pair of coordinate pairs indicates that when a locality having one of the coordinates shares word series (K) with a locality having the other coordinate, the presence of the common word series (K) is not to be considered sufficient for presenting the two localities to the user as possible duplicates.
(+) mismatches: an optional list of occurrence-ordered word series each indicating that they refer to something different from (K); if (K) itself appears in this list, occurrences of (K) are to be ignored for purposes of matching localities, except when the phonetic codes of (K) appear within a larger word series that is not ignored, and except when (K) represents the entire locality description. Mismatches other than (K) indicate semantically different word series that are either phonetically identical (when sorted) or phonetically synonymous. Each word series in mismatches also appears as a key in ExcludedMatchesStore containing (K) among its mismatches.

The 'regions' and 'coordinates' fields associate regions and coordinates on a pairwise basis in order to prevent transitive equivalence of regions or coordinates for a given word series. This ensures that the user must evaluate each pair of regions or each pair of coordinates for equivalence, in case it happens that A should be different from be and B should be different from C but A and C should actually be the same locality.

Two localities are presented as possible duplicates if there is at least one match between them. Matches are made between localities on the basis of sorts of the sequential phonetic series they contain. A sorted phonetic series (P) that otherwise designates a match is not considered a match if any of the following apply, where (W) is the occurrence-ordered word series for (P):

(a) If (W) is a key of ExcludedMatchesStore, (W) is the entire name of each locality, and the regions assigned to the localities are different but each associated with this key.
(b) If (W) is a key of ExcludedMatchesStore, (W) is the entire name of each locality, the localities belong to the same region, and the lat/long coordinate pairs assigned to the localities are each identical to different coordinate pairs. This condition fails if either locality lacks a coordinate pair.
(c) If (W) is a key of ExcludedMatchesStore, one locality contains (W), and the other locality contains a word series in the mismatches associated with this key. In this latter case, localities are still presented as potential duplicates if either (W) or the associated word series is the entire locality name.

Possible reasons that two matching localities might be inequivalent:

(+) Multiple localities have the same name in the two different regions.
(+) Multiple localities have the same name in the same region at different coordinates.
(+) Different word series that have identical phonetic series are inequivalent.
(+) Different word series that have synonymous phonetic series are inequivalent.
(+) The localities match on identical but uninformative word series.

ExcludedMatchesStore provides all of these inequivalences.

### PotentialSynonymsStore

Stores words and phrases that the user has indicated are synonymous, but in a way that treats entities phonetically identical to synonymous entities as potentially synonymous.

The key (K) is a sorted phonetic series. The value is a set of series pairs describing synonyms of (K), each consisting of the following:

	(+) wordSeries: the occurrence-ordered word series having the given phonetic series, for which the synonym was originally assigned; used to help the user manage synonyms
	(+) phoneticSeries: the sorted phonetic series for the word series. Each phonetic series also occurs in PotentialSynonymsStore as a key whose value contains a series pair with phoneticSeries (K).

The store preserves the word series associated with each phonetic series because these are the representations of the phonetic series that the user provides and subsequently sees.

In order to allow for the removal of synonym declarations, this structure only reflects explicitly declared synonyms and not the transitive nature of synonyms. To determine all the synonyms of any phonetic series, the each synonym found must itself be looked up for its synonyms, stopping only upon reaching previously-found synonyms.

If a locality being examined for potential duplication contains a phonetic series found in PotentialSynonymsStore, it is offered for comparison with all adjoined localities containing any of the synonymous phonetic series, unless their associated word series are paired in ExcludedMatchesStore.

Whenever the UI presents a locality to the user, all synonym declarations associated with that locality are also displayed, and the user is given the opportunity add, remove, or modify these synonyms. The UI only allows the user to establish synonyms for phonetic series found in the localities currently under consideration.

Potential synonyms can change over the course of consolidation, and after each change, subsequent consolidation should use the new synonyms.

## Storage Files

### LocalitySmarts

This is a data storage file stored in a preference-indicated directory and containing the following structures:

(+) ExcludedMatchesStore
(+) PotentialSynonymsStore

All users share this file.

### LocalityWork

This is a data storage file having a separate version stored in each user's directory and containing the following structures:

(+) RegionRoster
(+) PhoneticLocalityIndex
(+) LocalityCache

The file also indicates the domain selected for consolidation.

The file is deleted after consolidation completes.

## Initialization for the Consolidation Algorithm

(+) If the user's LocalityWork file does not yet exist:

	(+) Create the LocalityWork file and its data structures.
	(+) Add each geographic region of the selected domain to RegionRoster, including all regions contained within regions of the domain.
	(+) Set the current region (R) to an arbitrary region of RegionRoster, selected from among the most specific regions available.
	(+) Call RegionRoster.cacheRegion(R).
	
(+) If the user's LocalityWork already exists:

	(+) Set (R) to an arbitrarily selected cached region of RegionRoster having the lowest candidate value of adjoiningPendingCount.

## Outer Processing Loop

Select each next region to process in a way that minimizes the number of localities cached at any time while still allowing the user to evaluate one locality at a time before forever moving on to other localities.

The algorithm need not process all regions containing no localities. It does process some of them in order to ensure that all regions get examined in adjacency order.

Processes the current region (R), which must be a cached region of RegionRoster.

(+) Consolidate and remove (R) as follows:
	(+) If (R)'s adjoiningPendingCount is not zero:
		(+) If (R) is in the domain:
			(+) For each region (U) in the set containing regions strictly adjacent to (R), regions containing (R), and regions contained in (R):
				(+) If (U) has status "pending":
					(+) Call RegionRoster.cacheRegion(U).
					(+) If (U)'s localityTotal > 0:
						(+) If (U) is in the domain:
							(+) For each cached region (A) in the set containing regions strictly adjacent to (U), regions containing (U), and regions contained in (U):
								(+) Subtract (U)'s localityTotal from (A)'s adjoiningPendingCount.
						(+) Else:
							(+) For each cached region (A) strictly adjacent to (U):
								(+) If (A) is in the domain:
									(+) Subtract (U)'s localityTotal from (A)'s adjoiningPendingCount.
							(+) If (U) is in the over domain:
								(+) For each cached region (A) contained in (U):
									(+) If (A) is in the domain:
										(+) Subtract (U)'s localityTotal from (A)'s adjoiningPendingCount.
		(+) Else:
			(+) For each region (U) strictly adjacent to (R):
				(+) If (U) is in the domain and has status "pending":
					(+) Call RegionRoster.cacheRegion(U).
					(+) If (U)'s localityTotal > 0:
						(+) For each cached region (A) in the set containing regions strictly adjacent to (U), regions containing (U), and regions contained in (U):
							(+) Subtract (U)'s localityTotal from (A)'s adjoiningPendingCount.
			(+) If (R) is in the over domain:
				(+) For each region (U) contained in (R):
					(+) If (U) is in the domain and has status "pending":
						(+) Call RegionRoster.cacheRegion(U).
						(+) If (U)'s localityTotal > 0:
							(+) For each cached region (A) in the set containing regions strictly adjacent to (U), regions containing (U), and regions contained in (U):
								(+) Subtract (U)'s localityTotal from (A)'s adjoiningPendingCount.
	[Note: At this point, there are no pending regions adjacent to (R).]
	(+) Process (R) according to the region consolidation algorithm.
	(+) Mark (R) as complete in RegionRoster.

(+) Select the next region to consolidate as follows:
	(+) If RegionRoster contains at least one cached region:
		(+) Set (R) to an arbitrarily selected cached region of RegionRoster having the lowest candidate value of adjoiningPendingCount.
	(+) Else:
		(+) Set (R) to end the loop.

(+) Repeat the loop if (R) is not null.

[Note: There is a solution that keeps even fewer localities cached at a time, but it jumps around from region to region, preventing the user from focusing on evaluating one locality against all possible similar localities before moving on to the next locality. The present approach should help the user be more efficient, less error-prone, and less frustrated.]

## Consolidate a Region

Process the region (R), which must be a cached region.

Define a "found match" as a structure containing the following information:
	(+) the matching word series (W1) and its sorted phonetic series (Z1) from the first locality (L1)
	(+) the matching word series (W2) and its sorted phonetic series (Z2) from the second locality (L2)
	(+) the two word series that define the associated synonymous phonetic series, if applicable

(+) For each region (R1) in includedRegions(R, R.includesLowerRanks):
	(+) For each locality (L1) cached in LocalityCache for (R1):
		(+) Let (D) be the set of the IDs of the localities that have been compared with (L1), initially empty.
		(+) For each phonetic code (P1) in (L1):

			(+) For each locality (L2) associated with (P1) in PhoneticLocalityIndex:
				[BEGIN COMMON LOGIC]
				(+) If (L2) is not in (D):
					(+) If there is no baseline date, or if (R) is in the domain and (L1) is marked on or after the baseline date, or if (R) is not in the domain and (L2) is marked on or after the baseline date:
						(+) Let (R2) be the region assigned to (L2).
						(+) If (R1) is in the domain and ((R2) is adjacent to (R), contains (R), or contained in (R)), or if (R2) is in the domain and is adjacent to (R) [notes:  because (R1) is not in the domain, (R2) won't contain or be contained in (R); the comparison is with (R) not (R1) because adjacencies may not be defined for (R1)] -- prevents comparison when neither locality is in the domain:
							[END COMMON LOGIC]
							(+) If the entire word series of (L1) and (L2) are not identical or they are identical but neither a region match nor a coordinate match in ExcludedMatchesStore for that word series:
								(+) Collect the found matches (M) of all word series (W1) in (L1) having a sorted phonetic series identical to that of a word series (W2) in (L2), such that (W1) is not paired with (W2) in ExcludedMatchesStore.
								[BEGIN COMMON LOGIC]
								(+) If (M) is not empty:
									(+) Call processMatchingLocalities(L1, L2, M)
									(+) Add (L2) to (D).

			(+) Let (H) be the set of synonym phonetic series associated with (P1) in PhoneticLocalityIndex and found in (L1). These are the phonetic series of (L1) that have synonyms.
			(+) Let (I) be the set of synonyms in PotentialSynonymsStore for all of the phonetic series in (H), so that if there exists a synonym for a series in (H), then that synonym is in (I), except that (I) contains no series found in (H).
			(+) Let (J) be the set of phonetic codes found in (I).
			(+) For each phonetic code (P2) found in (J):
				(+) For each locality (L2) associated with (P2) in PhoneticLocalityIndex:
					[BEGIN COMMON LOGIC]
					(+) If (L2) is not in (D):
						(+) If there is no baseline date, or if (R) is in the domain and (L1) is marked on or after the baseline date, or if (R) is not in the domain and (L2) is marked on or after the baseline date:
							(+) Let (R2) be the region assigned to (L2).
							(+) If (R1) is in the domain and ((R2) is adjacent to (R), contains (R), or contained in (R)), or if (R2) is in the domain and is adjacent to (R) [notes:  because (R1) is not in the domain, (R2) won't contain or be contained in (R); the comparison is with (R) not (R1) because adjacencies may not be defined for (R1)] -- prevents comparison when neither locality is in the domain:
								[END COMMON LOGIC]
								(+) Collect the found matches (M) of all sorted phonetic series (Z2) in (L2) that are found in (I), such that the sorted word series (W1) for the phonetic series (Z1) in (L1) that is synonymous with (Z2) is not paired with the sorted word series (W2) for (Z2) in ExcludedMatchesStore.
								[BEGIN COMMON LOGIC]
								(+) If (M) is not empty:
									(+) Call processMatchingLocalities(L1, L2, M)
									(+) Add (L2) to (D).
									[END COMMON LOGIC]

	(+) Remove (L1)'s contribution to PhoneticLocalityIndex.
	(+) Remove (L1) from LocalityCache.

* This could probably be made efficient by keeping a list of string representations of the geographic IDs adjacent to (R) and first looking up the geographic ID in PhoneticLocalityIndex's lookup key for (L2) in this list.

Define function includedRegions(region R, includesLowerRanks):
	(+) Let S be the set containing (R).
	(+) If includesLowerRanks:
		(+) For each region immediately contained in (R):
			(+) Add includedRegions(R, true) to S.
	(+) Return S.

Define function localitiesOfRegion(cached region R, includesLowerRanks):
	(+) Let L be the set of localities assigned to region R.
	(+) If includesLowerRanks:
		(+) For each region S immediately contained in R:
			(+) Add localitiesOfRegion(S, true) to L.
	(+) Return L.

Define function processMatchingLocalities(locality L1, locality L2, found matches M):
	(+) Present the two matching localities to the user, clearly labeling (L1) as 'A' and (L2) as 'B'. ('A' remains constant until all similar localities are exhausted.) Display region, coordinates, remarks, and anything else that might be relevant to distinguishing localities. Possibly highlight each matching word series in M. Maybe highlight all matching terms in the same color but use a slider to put emphasis on corresponding matching terms. Hovering over matching word series might provide the reason for the match, as found in (M).
	(+) Present buttons labeled, "Replace A with B", "Replace B with A", and "Keep Both".
	(+) Give the user a chance to edit either locality, and for each, update LocalityCache and PhoneticLocalityIndex as needed. If the user edits 'A', disable the button "Replace A with B", and if the user edits 'B', disable the button "Replace B with A". Both buttons can be simultaneously disabled. Each locality also has an "Undo Edits" button that re-enables the associated "replace" button. The user can update locality text, geographic region, and coordinates. Update LocalityCache and PhoneticLocalityIndex as needed.
	(+) Give the user a chance to update synonymous phonetic series associated with either locality. These edits do not affect the "replace" buttons, because the user may be clarifying for other circumstances. Update PotentialSynonymsStore and PhoneticLocalityIndex as needed.
	(+) If the user selects "Replace A with B":
		(+) If (L1) is marked as a newly provided James locality, warn the user and ask the user to confirm the selection.
		(+) In Specify, point the records associated with (L1) to (L2).
		(+) Delete (L1) from Specify.
	(+) If the user selects "Replace B with A":
		(+) If (2) is marked as a newly provided James locality, warn the user and ask the user to confirm the selection.
		(+) In Specify, point the records associated with (L2) to (L1).
		(+) Delete (L2) from Specify.
	(+) If the user selects "Keep Both":
		(+) For each (W1) identical to its associated (W2) in (M), ask the user to select one of the following reasons (but if there is only one possible answer, assume that answer without involving the user):
			(+) Let (R1) and (R2) be the regions assigned to (L1) and (L2), respectively.
			(+) If (R1) is identical to (R2):
				(+) If the coordinates (C1) for (L1) and (C2) for (L2) are the different within the lowest precision specified for (C1) and (C2):
					(+) "There are at least two localities in (R1) named (W1)."
						(+) Add (C1) and (C2) to key (W1) in ExcludedMatchesStore.
			(+) Else:
				(+) "(R1) and (R2) contain distinct localities both named (W1)."
					(+) Add (R1) and (R2) to the key (W1) in ExcludedMatchesStore.
			(+) "The word(s) (W1) should be ignored when comparing localities."
				(+) Add (W1) to key (W1) in ExcludedMatchesStore.
		(+) For each (W1) different from its associated (W2) in (M):
			(+) Add (W2) to key (W1) in ExcludedMatchesStore.
			(+) Add (W1) to key (W2) in ExcludedMatchesStore.
